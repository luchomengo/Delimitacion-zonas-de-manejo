"""****************************************************************************                                                                         **   This program is free software; you can redistribute it and/or modify  **   it under the terms of the GNU General Public License as published by  **   the Free Software Foundation; either version 2 of the License, or     **   (at your option) any later version.                                   **                                                                         ****************************************************************************"""from qgis.PyQt.QtCore import QCoreApplicationfrom qgis.core import (QgsProcessing,                       QgsFeatureSink,                       QgsProcessingException,                       QgsProcessingAlgorithm,                       QgsProcessingParameterFeatureSource,                       QgsProcessingParameterString,                       QgsProcessingParameterFeatureSink,                       QgsProcessingParameterString,                       QgsProcessingOutputNumber)from qgis import processingclass SumaCampo(QgsProcessingAlgorithm):    """    This is an example algorithm that takes a vector layer and    creates a new identical one.    It is meant to be used as an example of how to create your own    algorithms and explain methods and variables used to do it. An    algorithm like this will be available in all elements, and there    is not need for additional work.    All Processing algorithms should extend the QgsProcessingAlgorithm    class.    """    # Constants used to refer to parameters and outputs. They will be    # used when calling the algorithm from another algorithm, or when    # calling from the QGIS console.    INPUT = 'INPUT'    OUTPUT = 'OUTPUT'    def tr(self, string):        """        Returns a translatable string with the self.tr() function.        """        return QCoreApplication.translate('Processing', string)    def createInstance(self):        return SumaCampo()    def name(self):        """        Returns the algorithm name, used for identifying the algorithm. This        string should be fixed for the algorithm, and must not be localised.        The name should be unique within each provider. Names should contain        lowercase alphanumeric characters only and no spaces or other        formatting characters.        """        return 'SumaCampo'    def displayName(self):        """        Returns the translated algorithm name, which should be used for any        user-visible display of the algorithm name.        """        return self.tr('Suma Campo')    def group(self):        """        Returns the name of the group this algorithm belongs to. This string        should be localised.        """        return self.tr('Delimitacion de zonas')    def groupId(self):        """        Returns the unique ID of the group this algorithm belongs to. This        string should be fixed for the algorithm, and must not be localised.        The group id should be unique within each provider. Group id should        contain lowercase alphanumeric characters only and no spaces or other        formatting characters.        """        return 'Delimitacion de zonas'    def shortHelpString(self):        """        Returns a localised short helper string for the algorithm. This string        should provide a basic description about what the algorithm does and the        parameters and outputs associated with it..        """        return self.tr("Suma por el campo de todas las entidades")    def initAlgorithm(self, config=None):        # Parámetros de entrada        self.addParameter(QgsProcessingParameterFeatureSource("capa", "Capa", [QgsProcessing.TypeVectorAnyGeometry]))        self.addParameter(QgsProcessingParameterString("atributo", "Atributo", optional=False ))        # Salida        self.addOutput(QgsProcessingOutputNumber('OUTPUT', self.tr('Suma del campo pasado por parametro')))       def processAlgorithm(self, parameters, context, feedback):        # Obtener la capa de entrada        capa = self.parameterAsSource(parameters, 'capa', context)        # Obtener el nombre del atributo        atributo = self.parameterAsString(parameters, 'atributo', context)        # Crear un iterador de features        it = capa.getFeatures()        # Inicializar la suma        suma = 0        # Iterar sobre los features        for feature in it:            # Obtener el valor del atributo            valor = feature.attribute(atributo)            # Añadir el valor a la suma            suma += valor        # Devolver la suma        feedback.setProgress(100)        return {'OUTPUT':suma}